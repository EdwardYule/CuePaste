# 项目工程规范

## Vue 3 项目规范
1. 使用 `<script setup>` 语法糖编写组件
2. 使用 TypeScript 进行类型检查
3. 组件生命周期中要注意清理事件监听器
4. 在 types 目录下添加必要的类型声明文件

## 依赖管理规范
1. 使用淘宝镜像源加速依赖安装
2. electron 相关的二进制文件使用国内镜像源
3. 将镜像配置保存在项目的 .npmrc 文件中
4. 定期更新依赖版本，关注安全更新

## 依赖安装问题解决方案
1. 网络问题导致安装失败时：
   - 清理 npm 缓存
   - 删除 node_modules 和 package-lock.json
   - 确保 .npmrc 配置正确
   - 尝试使用 cnpm 或 yarn 替代方案

## Electron-Vite 项目规范
1. 主进程代码放在 electron/ 目录下
2. 渲染进程代码放在 src/ 目录下
3. 使用 preload 脚本进行主进程和渲染进程的通信
4. 静态资源放在 src/assets/ 目录下

## 开发注意事项
1. 主进程代码修改后需要重启应用
2. 使用 contextBridge 和 ipcMain/ipcRenderer 进行进程间通信
3. 生产环境构建前确保 electron-builder 配置正确

## 剪贴板操作规范
1. 使用 electron 的 clipboard 模块监听系统剪贴板
2. 使用 setInterval 定期检查剪贴板变化，建议间隔 1000ms
3. 通过 IPC 通信将剪贴板内容从主进程传递到渲染进程
4. 在渲染进程中使用 ref 管理剪贴板历史
5. 建议限制剪贴板历史记录数量，避免内存占用过大

## 版本控制规范
1. 编译生成的目录不纳入版本控制
   - dist/：渲染进程编译产物
   - dist-electron/：主进程编译产物
   - dist-ssr/：SSR 编译产物
2. node_modules 不纳入版本控制
3. 本地配置文件（如 .env.local）不纳入版本控制
4. 编辑器配置文件（如 .vscode）按需纳入版本控制

## Electron 窗口配置规范
1. 无边框窗口配置：
   - 使用 `frame: false` 去除原生窗口边框
   - 使用 `autoHideMenuBar: true` 隐藏菜单栏
2. 无边框窗口注意事项：
   - 需要实现自定义窗口控制按钮（最小化、最大化、关闭）
   - 需要实现窗口拖拽功能
   - 建议添加窗口阴影效果提升用户体验

## 全局快捷键规范
1. 避免使用系统已占用的快捷键组合
2. 在应用退出时注销所有快捷键
3. 快捷键注册失败时提供日志提示
4. 推荐使用 Alt 或 Ctrl+Shift 组合键

## 系统托盘规范
1. 托盘图标设计：
   - 使用清晰可识别的图标
   - 设置合适的工具提示文本
2. 托盘菜单设计：
   - 提供基本的窗口控制选项
   - 提供退出应用的选项
3. 托盘事件处理：
   - 左键点击切换窗口显示状态
   - 右键显示上下文菜单
4. 资源清理：
   - 在应用退出时销毁托盘图标
   - 确保托盘相关资源正确释放

## Electron 开发调试规范
1. 开发模式下自动打开开发者工具：
   - 使用 `win.webContents.openDevTools()` 在开发环境打开控制台
   - 仅在 `VITE_DEV_SERVER_URL` 存在时打开，避免生产环境开启
2. 调试最佳实践：
   - 使用 `console.log` 时注意添加清晰的标签
   - 在生产环境构建前清理所有调试代码
   - 使用 Vue Devtools 调试组件状态 